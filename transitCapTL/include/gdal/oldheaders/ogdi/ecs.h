/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _ECSH_H_RPCGEN
#define	_ECSH_H_RPCGEN

#include <rpc/rpc.h>

#ifdef __cplusplus
extern "C" {
#endif

/* 
 * fichier genere par RPCGEN a partir de ecs.x
 *
 *    Declaration des structures & prototypes de l'extension client/serveur.
 *    Ce fichier est recu par rpcgen et ce dernier generera 4 fichiers pour
 *    pour l'extension client/serveur. Le "header" suivant doit ce retrouver
 *    dans tout les fichiers 
 */

/*
 * Copyright (C) 1995 Logiciels et Applications Scientifiques (L.A.S.) Inc
 * Permission to use, copy, modify and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies, that
 * both the copyright notice and this permission notice appear in
 * supporting documentation, and that the name of L.A.S. Inc not be used 
 * in advertising or publicity pertaining to distribution of the software 
 * without specific, written prior permission. L.A.S. Inc. makes no
 * representations about the suitability of this software for any purpose.
 * It is provided "as is" without express or implied warranty.
 */

extern u_int ecs_compression_type;
extern u_int ecs_compression_version;
extern u_int ecs_compression_blksize;
extern u_int ecs_compression_level;
extern u_int ecs_compression_fullsize;

#define	ECS_SUCCESS 0
#define	ECS_FAILURE 1
#define	ECS_RASTERSIZE 1000
#define	ECS_MTEXT 1024
#define	ECS_TRANSIENT_MIN 1073741824
#define	ECS_TRANSIENT_MAX 1610612735
#define	ECS_COMPRESS_NONE 0
#define	ECS_COMPRESS_ZLIB 1
#define	ECS_ZLIB_VERSION 0
#define	ECS_ZLIB_LEVEL_DEFAULT 1
#define	ECS_ZLIB_BLKSIZE_DEFAULT 512
#define	ECS_ZLIB_BLKSIZE_MAX 131072
#define	ECS_CACHE_DEFAULT 25
#define	ECS_CACHE_MIN 1
#define	ECS_CACHE_MAX 10000

enum ecs_Family {
	Area = 1,
	Line = 2,
	Point = 3,
	Matrix = 4,
	Image = 5,
	Text = 6,
	Edge = 7,
	Face = 8,
	Node = 9,
	Ring = 10
};
typedef enum ecs_Family ecs_Family;

struct ecs_Region {
	double north;
	double south;
	double east;
	double west;
	double ns_res;
	double ew_res;
};
typedef struct ecs_Region ecs_Region;

enum ecs_Resampling {
	nn = 1
};
typedef enum ecs_Resampling ecs_Resampling;

enum ecs_Transformation {
	projective = 1,
	affine = 2,
	similarity = 3
};
typedef enum ecs_Transformation ecs_Transformation;

struct ecs_RasterConversion {
	struct {
		u_int coef_len;
		double *coef_val;
	} coef;
	int isProjEqual;
	ecs_Resampling r_method;
	ecs_Transformation t_method;
};
typedef struct ecs_RasterConversion ecs_RasterConversion;

struct ecs_Coordinate {
	double x;
	double y;
};
typedef struct ecs_Coordinate ecs_Coordinate;

struct ecs_FeatureRing {
	ecs_Coordinate centroid;
	struct {
		u_int c_len;
		ecs_Coordinate *c_val;
	} c;
};
typedef struct ecs_FeatureRing ecs_FeatureRing;

struct ecs_Area {
	struct {
		u_int ring_len;
		ecs_FeatureRing *ring_val;
	} ring;
};
typedef struct ecs_Area ecs_Area;

struct ecs_Line {
	struct {
		u_int c_len;
		ecs_Coordinate *c_val;
	} c;
};
typedef struct ecs_Line ecs_Line;

struct ecs_Point {
	ecs_Coordinate c;
};
typedef struct ecs_Point ecs_Point;

struct ecs_Matrix {
	struct {
		u_int x_len;
		u_int *x_val;
	} x;
};
typedef struct ecs_Matrix ecs_Matrix;

struct ecs_Image {
	struct {
		u_int x_len;
		u_int *x_val;
	} x;
};
typedef struct ecs_Image ecs_Image;

struct ecs_Text {
	char *desc;
	ecs_Coordinate c;
};
typedef struct ecs_Text ecs_Text;

struct ecs_Node {
	int id;
	int containfaceid;
	ecs_Coordinate c;
};
typedef struct ecs_Node ecs_Node;

struct ecs_Edge {
	int id;
	int startnodeid;
	int endnodeid;
	int rightfaceid;
	int leftfaceid;
	int rightfedgeid;
	int leftfedgeid;
	struct {
		u_int c_len;
		ecs_Coordinate *c_val;
	} c;
};
typedef struct ecs_Edge ecs_Edge;

enum ecs_TopoLevel {
	Level012 = 1,
	Level3 = 2
};
typedef enum ecs_TopoLevel ecs_TopoLevel;

struct ecs_Face {
	int id;
	struct {
		u_int edgeid_len;
		int *edgeid_val;
	} edgeid;
};
typedef struct ecs_Face ecs_Face;

struct ecs_AreaPrim {
	ecs_TopoLevel level;
	union {
		struct {
			u_int edgeid_len;
			int *edgeid_val;
		} edgeid;
		struct {
			u_int fedgeid_len;
			ecs_Face *fedgeid_val;
		} fedgeid;
	} ecs_AreaPrim_u;
};
typedef struct ecs_AreaPrim ecs_AreaPrim;

struct ecs_Geometry {
	ecs_Family family;
	union {
		ecs_Area area;
		ecs_Line line;
		ecs_Point point;
		ecs_Matrix matrix;
		ecs_Image image;
		ecs_Text text;
		ecs_Node node;
		ecs_Edge edge;
		ecs_AreaPrim ring;
	} ecs_Geometry_u;
};
typedef struct ecs_Geometry ecs_Geometry;

struct ecs_Object {
	char *Id;
	ecs_Geometry geom;
	char *attr;
	double xmin;
	double ymin;
	double xmax;
	double ymax;
};
typedef struct ecs_Object ecs_Object;

enum ecs_AttributeFormat {
	Char = 1,
	Varchar = 2,
	Longvarchar = 3,
	Decimal = 4,
	Numeric = 5,
	Smallint = 6,
	Integer = 7,
	Real = 8,
	Float = 9,
	Double = 10
};
typedef enum ecs_AttributeFormat ecs_AttributeFormat;

struct ecs_ObjAttribute {
	char *name;
	ecs_AttributeFormat type;
	int lenght;
	int precision;
	int nullable;
};
typedef struct ecs_ObjAttribute ecs_ObjAttribute;

struct ecs_ObjAttributeFormat {
	struct {
		u_int oa_len;
		ecs_ObjAttribute *oa_val;
	} oa;
};
typedef struct ecs_ObjAttributeFormat ecs_ObjAttributeFormat;

struct ecs_Category {
	long no_cat;
	u_int r;
	u_int g;
	u_int b;
	char *label;
	u_long qty;
};
typedef struct ecs_Category ecs_Category;

struct ecs_RasterInfo {
	long mincat;
	long maxcat;
	int width;
	int height;
	struct {
		u_int cat_len;
		ecs_Category *cat_val;
	} cat;
};
typedef struct ecs_RasterInfo ecs_RasterInfo;

struct ecs_Compression {
	u_int cachesize;
	u_int ctype;
	u_int cversion;
	u_int clevel;
	u_int cblksize;
	u_int cfullsize;
};
typedef struct ecs_Compression ecs_Compression;

enum ecs_ResultType {
	SimpleError = 0,
	Object = 1,
	GeoRegion = 2,
	objAttributeFormat = 3,
	RasterInfo = 4,
	AText = 5,
	MultiResult = 6
};
typedef enum ecs_ResultType ecs_ResultType;
typedef struct ecs_ResultUnion ecs_ResultUnion;

struct ecs_ResultUnion {
	ecs_ResultType type;
	union {
		ecs_Object dob;
		ecs_Region gr;
		ecs_ObjAttributeFormat oaf;
		ecs_RasterInfo ri;
		char *s;
		struct {
			u_int results_len;
			ecs_ResultUnion *results_val;
		} results;
	} ecs_ResultUnion_u;
};

struct ecs_Result {
	ecs_Compression compression;
	int error;
	char *message;
	ecs_ResultUnion res;
};
typedef struct ecs_Result ecs_Result;

struct ecs_LayerSelection {
	char *Select;
	ecs_Family F;
};
typedef struct ecs_LayerSelection ecs_LayerSelection;

struct ecs_ProxyCreateServer {
	char *server_name;
	char *server_url;
};
typedef struct ecs_ProxyCreateServer ecs_ProxyCreateServer;

#include <ecs_util.h> /* Outils pour l'aide a ecs */


#define	ECSPROG ((unsigned long)(0x20000001))
#define	ECSVERS ((unsigned long)(1))

#if defined(__STDC__) || defined(__cplusplus)
#define	CREATESERVER ((unsigned long)(1))
extern  ecs_Result * createserver_1(char **, CLIENT *);
extern  ecs_Result * createserver_1_svc(char **, struct svc_req *);
#define	DESTROYSERVER ((unsigned long)(2))
extern  ecs_Result * destroyserver_1(void *, CLIENT *);
extern  ecs_Result * destroyserver_1_svc(void *, struct svc_req *);
#define	SELECTLAYER ((unsigned long)(3))
extern  ecs_Result * selectlayer_1(ecs_LayerSelection *, CLIENT *);
extern  ecs_Result * selectlayer_1_svc(ecs_LayerSelection *, struct svc_req *);
#define	RELEASELAYER ((unsigned long)(4))
extern  ecs_Result * releaselayer_1(ecs_LayerSelection *, CLIENT *);
extern  ecs_Result * releaselayer_1_svc(ecs_LayerSelection *, struct svc_req *);
#define	SELECTREGION ((unsigned long)(5))
extern  ecs_Result * selectregion_1(ecs_Region *, CLIENT *);
extern  ecs_Result * selectregion_1_svc(ecs_Region *, struct svc_req *);
#define	GETDICTIONNARY ((unsigned long)(6))
extern  ecs_Result * getdictionnary_1(void *, CLIENT *);
extern  ecs_Result * getdictionnary_1_svc(void *, struct svc_req *);
#define	GETATTRIBUTEFORMAT ((unsigned long)(7))
extern  ecs_Result * getattributeformat_1(void *, CLIENT *);
extern  ecs_Result * getattributeformat_1_svc(void *, struct svc_req *);
#define	GETNEXTOBJECT ((unsigned long)(8))
extern  ecs_Result * getnextobject_1(void *, CLIENT *);
extern  ecs_Result * getnextobject_1_svc(void *, struct svc_req *);
#define	GETRASTERINFO ((unsigned long)(9))
extern  ecs_Result * getrasterinfo_1(void *, CLIENT *);
extern  ecs_Result * getrasterinfo_1_svc(void *, struct svc_req *);
#define	GETOBJECT ((unsigned long)(10))
extern  ecs_Result * getobject_1(char **, CLIENT *);
extern  ecs_Result * getobject_1_svc(char **, struct svc_req *);
#define	GETOBJECTIDFROMCOORD ((unsigned long)(11))
extern  ecs_Result * getobjectidfromcoord_1(ecs_Coordinate *, CLIENT *);
extern  ecs_Result * getobjectidfromcoord_1_svc(ecs_Coordinate *, struct svc_req *);
#define	UPDATEDICTIONARY ((unsigned long)(12))
extern  ecs_Result * updatedictionary_1(char **, CLIENT *);
extern  ecs_Result * updatedictionary_1_svc(char **, struct svc_req *);
#define	GETSERVERPROJECTION ((unsigned long)(13))
extern  ecs_Result * getserverprojection_1(void *, CLIENT *);
extern  ecs_Result * getserverprojection_1_svc(void *, struct svc_req *);
#define	GETGLOBALBOUND ((unsigned long)(14))
extern  ecs_Result * getglobalbound_1(void *, CLIENT *);
extern  ecs_Result * getglobalbound_1_svc(void *, struct svc_req *);
#define	SETSERVERLANGUAGE ((unsigned long)(15))
extern  ecs_Result * setserverlanguage_1(u_int *, CLIENT *);
extern  ecs_Result * setserverlanguage_1_svc(u_int *, struct svc_req *);
#define	SETSERVERPROJECTION ((unsigned long)(16))
extern  ecs_Result * setserverprojection_1(char **, CLIENT *);
extern  ecs_Result * setserverprojection_1_svc(char **, struct svc_req *);
#define	SETRASTERCONVERSION ((unsigned long)(17))
extern  ecs_Result * setrasterconversion_1(ecs_RasterConversion *, CLIENT *);
extern  ecs_Result * setrasterconversion_1_svc(ecs_RasterConversion *, struct svc_req *);
#define	CREATEPROXYSERVER ((unsigned long)(100))
extern  ecs_Result * createproxyserver_1(ecs_ProxyCreateServer *, CLIENT *);
extern  ecs_Result * createproxyserver_1_svc(ecs_ProxyCreateServer *, struct svc_req *);
#define	SETCOMPRESSION ((unsigned long)(101))
extern  ecs_Result * setcompression_1(ecs_Compression *, CLIENT *);
extern  ecs_Result * setcompression_1_svc(ecs_Compression *, struct svc_req *);
extern int ecsprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	CREATESERVER ((unsigned long)(1))
extern  ecs_Result * createserver_1();
extern  ecs_Result * createserver_1_svc();
#define	DESTROYSERVER ((unsigned long)(2))
extern  ecs_Result * destroyserver_1();
extern  ecs_Result * destroyserver_1_svc();
#define	SELECTLAYER ((unsigned long)(3))
extern  ecs_Result * selectlayer_1();
extern  ecs_Result * selectlayer_1_svc();
#define	RELEASELAYER ((unsigned long)(4))
extern  ecs_Result * releaselayer_1();
extern  ecs_Result * releaselayer_1_svc();
#define	SELECTREGION ((unsigned long)(5))
extern  ecs_Result * selectregion_1();
extern  ecs_Result * selectregion_1_svc();
#define	GETDICTIONNARY ((unsigned long)(6))
extern  ecs_Result * getdictionnary_1();
extern  ecs_Result * getdictionnary_1_svc();
#define	GETATTRIBUTEFORMAT ((unsigned long)(7))
extern  ecs_Result * getattributeformat_1();
extern  ecs_Result * getattributeformat_1_svc();
#define	GETNEXTOBJECT ((unsigned long)(8))
extern  ecs_Result * getnextobject_1();
extern  ecs_Result * getnextobject_1_svc();
#define	GETRASTERINFO ((unsigned long)(9))
extern  ecs_Result * getrasterinfo_1();
extern  ecs_Result * getrasterinfo_1_svc();
#define	GETOBJECT ((unsigned long)(10))
extern  ecs_Result * getobject_1();
extern  ecs_Result * getobject_1_svc();
#define	GETOBJECTIDFROMCOORD ((unsigned long)(11))
extern  ecs_Result * getobjectidfromcoord_1();
extern  ecs_Result * getobjectidfromcoord_1_svc();
#define	UPDATEDICTIONARY ((unsigned long)(12))
extern  ecs_Result * updatedictionary_1();
extern  ecs_Result * updatedictionary_1_svc();
#define	GETSERVERPROJECTION ((unsigned long)(13))
extern  ecs_Result * getserverprojection_1();
extern  ecs_Result * getserverprojection_1_svc();
#define	GETGLOBALBOUND ((unsigned long)(14))
extern  ecs_Result * getglobalbound_1();
extern  ecs_Result * getglobalbound_1_svc();
#define	SETSERVERLANGUAGE ((unsigned long)(15))
extern  ecs_Result * setserverlanguage_1();
extern  ecs_Result * setserverlanguage_1_svc();
#define	SETSERVERPROJECTION ((unsigned long)(16))
extern  ecs_Result * setserverprojection_1();
extern  ecs_Result * setserverprojection_1_svc();
#define	SETRASTERCONVERSION ((unsigned long)(17))
extern  ecs_Result * setrasterconversion_1();
extern  ecs_Result * setrasterconversion_1_svc();
#define	CREATEPROXYSERVER ((unsigned long)(100))
extern  ecs_Result * createproxyserver_1();
extern  ecs_Result * createproxyserver_1_svc();
#define	SETCOMPRESSION ((unsigned long)(101))
extern  ecs_Result * setcompression_1();
extern  ecs_Result * setcompression_1_svc();
extern int ecsprog_1_freeresult();
#endif /* K&R C */

#define	ECSPROXYPROG ((unsigned long)(0x20000002))
#define	ECSPROXYVERS ((unsigned long)(1))

#if defined(__STDC__) || defined(__cplusplus)
#define	PROXY_CREATEREMOTESERVER ((unsigned long)(1))
extern  ecs_Result * proxy_createremoteserver_1(char **, CLIENT *);
extern  ecs_Result * proxy_createremoteserver_1_svc(char **, struct svc_req *);
#define	PROXY_DESTROYSERVER ((unsigned long)(2))
extern  ecs_Result * proxy_destroyserver_1(void *, CLIENT *);
extern  ecs_Result * proxy_destroyserver_1_svc(void *, struct svc_req *);
#define	PROXY_SELECTLAYER ((unsigned long)(3))
extern  ecs_Result * proxy_selectlayer_1(ecs_LayerSelection *, CLIENT *);
extern  ecs_Result * proxy_selectlayer_1_svc(ecs_LayerSelection *, struct svc_req *);
#define	PROXY_RELEASELAYER ((unsigned long)(4))
extern  ecs_Result * proxy_releaselayer_1(ecs_LayerSelection *, CLIENT *);
extern  ecs_Result * proxy_releaselayer_1_svc(ecs_LayerSelection *, struct svc_req *);
#define	PROXY_SELECTREGION ((unsigned long)(5))
extern  ecs_Result * proxy_selectregion_1(ecs_Region *, CLIENT *);
extern  ecs_Result * proxy_selectregion_1_svc(ecs_Region *, struct svc_req *);
#define	PROXY_GETDICTIONNARY ((unsigned long)(6))
extern  ecs_Result * proxy_getdictionnary_1(void *, CLIENT *);
extern  ecs_Result * proxy_getdictionnary_1_svc(void *, struct svc_req *);
#define	PROXY_GETATTRIBUTEFORMAT ((unsigned long)(7))
extern  ecs_Result * proxy_getattributeformat_1(void *, CLIENT *);
extern  ecs_Result * proxy_getattributeformat_1_svc(void *, struct svc_req *);
#define	PROXY_GETNEXTOBJECT ((unsigned long)(8))
extern  ecs_Result * proxy_getnextobject_1(void *, CLIENT *);
extern  ecs_Result * proxy_getnextobject_1_svc(void *, struct svc_req *);
#define	PROXY_GETRASTERINFO ((unsigned long)(9))
extern  ecs_Result * proxy_getrasterinfo_1(void *, CLIENT *);
extern  ecs_Result * proxy_getrasterinfo_1_svc(void *, struct svc_req *);
#define	PROXY_GETOBJECT ((unsigned long)(10))
extern  ecs_Result * proxy_getobject_1(char **, CLIENT *);
extern  ecs_Result * proxy_getobject_1_svc(char **, struct svc_req *);
#define	PROXY_GETOBJECTIDFROMCOORD ((unsigned long)(11))
extern  ecs_Result * proxy_getobjectidfromcoord_1(ecs_Coordinate *, CLIENT *);
extern  ecs_Result * proxy_getobjectidfromcoord_1_svc(ecs_Coordinate *, struct svc_req *);
#define	PROXY_UPDATEDICTIONARY ((unsigned long)(12))
extern  ecs_Result * proxy_updatedictionary_1(char **, CLIENT *);
extern  ecs_Result * proxy_updatedictionary_1_svc(char **, struct svc_req *);
#define	PROXY_GETSERVERPROJECTION ((unsigned long)(13))
extern  ecs_Result * proxy_getserverprojection_1(void *, CLIENT *);
extern  ecs_Result * proxy_getserverprojection_1_svc(void *, struct svc_req *);
#define	PROXY_GETGLOBALBOUND ((unsigned long)(14))
extern  ecs_Result * proxy_getglobalbound_1(void *, CLIENT *);
extern  ecs_Result * proxy_getglobalbound_1_svc(void *, struct svc_req *);
#define	PROXY_SETSERVERLANGUAGE ((unsigned long)(15))
extern  ecs_Result * proxy_setserverlanguage_1(u_int *, CLIENT *);
extern  ecs_Result * proxy_setserverlanguage_1_svc(u_int *, struct svc_req *);
#define	PROXY_SETSERVERPROJECTION ((unsigned long)(16))
extern  ecs_Result * proxy_setserverprojection_1(char **, CLIENT *);
extern  ecs_Result * proxy_setserverprojection_1_svc(char **, struct svc_req *);
#define	PROXY_SETRASTERCONVERSION ((unsigned long)(17))
extern  ecs_Result * proxy_setrasterconversion_1(ecs_RasterConversion *, CLIENT *);
extern  ecs_Result * proxy_setrasterconversion_1_svc(ecs_RasterConversion *, struct svc_req *);
#define	PROXY_CREATESERVER ((unsigned long)(100))
extern  ecs_Result * proxy_createserver_1(ecs_ProxyCreateServer *, CLIENT *);
extern  ecs_Result * proxy_createserver_1_svc(ecs_ProxyCreateServer *, struct svc_req *);
#define	PROXY_SETCOMPRESSION ((unsigned long)(101))
extern  ecs_Result * proxy_setcompression_1(ecs_Compression *, CLIENT *);
extern  ecs_Result * proxy_setcompression_1_svc(ecs_Compression *, struct svc_req *);
extern int ecsproxyprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	PROXY_CREATEREMOTESERVER ((unsigned long)(1))
extern  ecs_Result * proxy_createremoteserver_1();
extern  ecs_Result * proxy_createremoteserver_1_svc();
#define	PROXY_DESTROYSERVER ((unsigned long)(2))
extern  ecs_Result * proxy_destroyserver_1();
extern  ecs_Result * proxy_destroyserver_1_svc();
#define	PROXY_SELECTLAYER ((unsigned long)(3))
extern  ecs_Result * proxy_selectlayer_1();
extern  ecs_Result * proxy_selectlayer_1_svc();
#define	PROXY_RELEASELAYER ((unsigned long)(4))
extern  ecs_Result * proxy_releaselayer_1();
extern  ecs_Result * proxy_releaselayer_1_svc();
#define	PROXY_SELECTREGION ((unsigned long)(5))
extern  ecs_Result * proxy_selectregion_1();
extern  ecs_Result * proxy_selectregion_1_svc();
#define	PROXY_GETDICTIONNARY ((unsigned long)(6))
extern  ecs_Result * proxy_getdictionnary_1();
extern  ecs_Result * proxy_getdictionnary_1_svc();
#define	PROXY_GETATTRIBUTEFORMAT ((unsigned long)(7))
extern  ecs_Result * proxy_getattributeformat_1();
extern  ecs_Result * proxy_getattributeformat_1_svc();
#define	PROXY_GETNEXTOBJECT ((unsigned long)(8))
extern  ecs_Result * proxy_getnextobject_1();
extern  ecs_Result * proxy_getnextobject_1_svc();
#define	PROXY_GETRASTERINFO ((unsigned long)(9))
extern  ecs_Result * proxy_getrasterinfo_1();
extern  ecs_Result * proxy_getrasterinfo_1_svc();
#define	PROXY_GETOBJECT ((unsigned long)(10))
extern  ecs_Result * proxy_getobject_1();
extern  ecs_Result * proxy_getobject_1_svc();
#define	PROXY_GETOBJECTIDFROMCOORD ((unsigned long)(11))
extern  ecs_Result * proxy_getobjectidfromcoord_1();
extern  ecs_Result * proxy_getobjectidfromcoord_1_svc();
#define	PROXY_UPDATEDICTIONARY ((unsigned long)(12))
extern  ecs_Result * proxy_updatedictionary_1();
extern  ecs_Result * proxy_updatedictionary_1_svc();
#define	PROXY_GETSERVERPROJECTION ((unsigned long)(13))
extern  ecs_Result * proxy_getserverprojection_1();
extern  ecs_Result * proxy_getserverprojection_1_svc();
#define	PROXY_GETGLOBALBOUND ((unsigned long)(14))
extern  ecs_Result * proxy_getglobalbound_1();
extern  ecs_Result * proxy_getglobalbound_1_svc();
#define	PROXY_SETSERVERLANGUAGE ((unsigned long)(15))
extern  ecs_Result * proxy_setserverlanguage_1();
extern  ecs_Result * proxy_setserverlanguage_1_svc();
#define	PROXY_SETSERVERPROJECTION ((unsigned long)(16))
extern  ecs_Result * proxy_setserverprojection_1();
extern  ecs_Result * proxy_setserverprojection_1_svc();
#define	PROXY_SETRASTERCONVERSION ((unsigned long)(17))
extern  ecs_Result * proxy_setrasterconversion_1();
extern  ecs_Result * proxy_setrasterconversion_1_svc();
#define	PROXY_CREATESERVER ((unsigned long)(100))
extern  ecs_Result * proxy_createserver_1();
extern  ecs_Result * proxy_createserver_1_svc();
#define	PROXY_SETCOMPRESSION ((unsigned long)(101))
extern  ecs_Result * proxy_setcompression_1();
extern  ecs_Result * proxy_setcompression_1_svc();
extern int ecsproxyprog_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ecs_Family(XDR *, ecs_Family*);
extern  bool_t xdr_ecs_Region(XDR *, ecs_Region*);
extern  bool_t xdr_ecs_Resampling(XDR *, ecs_Resampling*);
extern  bool_t xdr_ecs_Transformation(XDR *, ecs_Transformation*);
extern  bool_t xdr_ecs_RasterConversion(XDR *, ecs_RasterConversion*);
extern  bool_t xdr_ecs_Coordinate(XDR *, ecs_Coordinate*);
extern  bool_t xdr_ecs_FeatureRing(XDR *, ecs_FeatureRing*);
extern  bool_t xdr_ecs_Area(XDR *, ecs_Area*);
extern  bool_t xdr_ecs_Line(XDR *, ecs_Line*);
extern  bool_t xdr_ecs_Point(XDR *, ecs_Point*);
extern  bool_t xdr_ecs_Matrix(XDR *, ecs_Matrix*);
extern  bool_t xdr_ecs_Image(XDR *, ecs_Image*);
extern  bool_t xdr_ecs_Text(XDR *, ecs_Text*);
extern  bool_t xdr_ecs_Node(XDR *, ecs_Node*);
extern  bool_t xdr_ecs_Edge(XDR *, ecs_Edge*);
extern  bool_t xdr_ecs_TopoLevel(XDR *, ecs_TopoLevel*);
extern  bool_t xdr_ecs_Face(XDR *, ecs_Face*);
extern  bool_t xdr_ecs_AreaPrim(XDR *, ecs_AreaPrim*);
extern  bool_t xdr_ecs_Geometry(XDR *, ecs_Geometry*);
extern  bool_t xdr_ecs_Object(XDR *, ecs_Object*);
extern  bool_t xdr_ecs_AttributeFormat(XDR *, ecs_AttributeFormat*);
extern  bool_t xdr_ecs_ObjAttribute(XDR *, ecs_ObjAttribute*);
extern  bool_t xdr_ecs_ObjAttributeFormat(XDR *, ecs_ObjAttributeFormat*);
extern  bool_t xdr_ecs_Category(XDR *, ecs_Category*);
extern  bool_t xdr_ecs_RasterInfo(XDR *, ecs_RasterInfo*);
extern  bool_t xdr_ecs_Compression(XDR *, ecs_Compression*);
extern  bool_t xdr_ecs_ResultType(XDR *, ecs_ResultType*);
extern  bool_t xdr_ecs_ResultUnion(XDR *, ecs_ResultUnion*);
extern  bool_t xdr_ecs_Result(XDR *, ecs_Result*);
extern  bool_t xdr_ecs_LayerSelection(XDR *, ecs_LayerSelection*);
extern  bool_t xdr_ecs_ProxyCreateServer(XDR *, ecs_ProxyCreateServer*);

#else /* K&R C */
extern bool_t xdr_ecs_Family();
extern bool_t xdr_ecs_Region();
extern bool_t xdr_ecs_Resampling();
extern bool_t xdr_ecs_Transformation();
extern bool_t xdr_ecs_RasterConversion();
extern bool_t xdr_ecs_Coordinate();
extern bool_t xdr_ecs_FeatureRing();
extern bool_t xdr_ecs_Area();
extern bool_t xdr_ecs_Line();
extern bool_t xdr_ecs_Point();
extern bool_t xdr_ecs_Matrix();
extern bool_t xdr_ecs_Image();
extern bool_t xdr_ecs_Text();
extern bool_t xdr_ecs_Node();
extern bool_t xdr_ecs_Edge();
extern bool_t xdr_ecs_TopoLevel();
extern bool_t xdr_ecs_Face();
extern bool_t xdr_ecs_AreaPrim();
extern bool_t xdr_ecs_Geometry();
extern bool_t xdr_ecs_Object();
extern bool_t xdr_ecs_AttributeFormat();
extern bool_t xdr_ecs_ObjAttribute();
extern bool_t xdr_ecs_ObjAttributeFormat();
extern bool_t xdr_ecs_Category();
extern bool_t xdr_ecs_RasterInfo();
extern bool_t xdr_ecs_Compression();
extern bool_t xdr_ecs_ResultType();
extern bool_t xdr_ecs_ResultUnion();
extern bool_t xdr_ecs_Result();
extern bool_t xdr_ecs_LayerSelection();
extern bool_t xdr_ecs_ProxyCreateServer();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_ECS.H_H_RPCGEN */
